{"name":"Majooljs","tagline":"","body":"MajoolJS [![Build Status](https://travis-ci.org/HenriqueLimas/majooljs.svg)](https://travis-ci.org/HenriqueLimas/majooljs)\r\n========\r\n### What is it?\r\nMajoolJS is a simple way to separate your code in modules without any configuration.\r\nThe syntax of Majool is inspired in modularization of ES2015.\r\n\r\n### What is not it?\r\nMajoolJS is not a file/module loader like [RequireJS](http://requirejs.org/) or [SystemJS](https://github.com/systemjs/systemjs) and Majool does not works with\r\nLazy Loading, because the others modules loaders know do very well this job.\r\n\r\n### Download / Clone\r\n**Bower**:\r\n```bash\r\nbower install majooljs\r\n```\r\n\r\nAlternatively you can [download](https://github.com/HenriqueLimas/majooljs/archive/master.zip)\r\nthis repository.\r\n\r\nOr you can clone the repo using Git:\r\n\r\n```bash\r\ngit clone https://github.com/HenriqueLimas/majooljs.git\r\n```\r\n\r\n### Basic Use\r\n```html\r\n<script src=\"bower_components/majooljs/dist/majool.js\"></script>\r\n<script src=\"my-first-module.js\"></script>\r\n<script src=\"main.js\"></script>\r\n```\r\nWhere ```my-first-module.js``` is:\r\n\r\n```javascript\r\n  // create a new module\r\n  mjs.module('myModule');\r\n  \r\n  // Exporting MyComponent into myModule\r\n  mjs.export(function MyComponent() {\r\n    this.firstName = 'Ford';\r\n    this.lastName = 'Prefect';\r\n  });\r\n```\r\n\r\nand ```main.js```is:\r\n\r\n```javascript\r\n  // Importing the MyComponent from module created.\r\n  var myModule = mjs.import(['MyComponent']).from('myModule');\r\n\r\n  // Simple Javascript =)\r\n  var MyComponent = myModule.MyComponent;\r\n\r\n  var fordPrefect = new MyComponent();\r\n```\r\n\r\n### API Reference\r\n\r\n##### module(name):\r\nCreate a module and define the current module.\r\n##### export([name|classComponent|object], [component]):\r\nAppend the new component in the current module. \r\nWhere the first parameter can be:\r\n  - a string name\r\n  - Constructor\r\n  - object with all the keys to be exported.\r\n\r\nThe ```component``` parameter is used when the first parameter is a string.\r\n\r\n##### exportDefault([name|classComponent|object], [component]):\r\nAppend the new component and set that as default in the current module.\r\nWhere the first parameter can be:\r\n  - a string name\r\n  - Constructor\r\n  - object with all the keys to be exported.\r\n\r\nThe ```component``` parameter is used when the first parameter is a string.\r\n\r\n##### import([array|string]).from(moduleName):\r\nPrepares the keys to be imported from module. \r\nIf an ```array``` is passed, it returns an object with all properties requested from the module name.\r\nIf a ```string``` is passed, it returns a ```default``` component from module name.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}